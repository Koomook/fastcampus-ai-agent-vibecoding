#!/bin/bash

# Git Worktree 자동화 스크립트
# 사용법: ./wt <브랜치명>

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 사용법 출력 함수
print_usage() {
    echo "사용법: $0 <브랜치명>"
    echo "예시: $0 feature/new-feature"
    exit 1
}

# 에러 메시지 출력 함수
error_exit() {
    echo -e "${RED}❌ 에러: $1${NC}" >&2
    exit 1
}

# 성공 메시지 출력 함수
success_message() {
    echo -e "${GREEN}✓ $1${NC}"
}

# 정보 메시지 출력 함수
info_message() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# 진행 상황 메시지 출력 함수
progress_message() {
    echo -e "${YELLOW}⟳ $1${NC}"
}

# 인자 확인
if [ $# -ne 1 ]; then
    print_usage
fi

BRANCH_NAME="$1"

# 현재 디렉토리가 git 저장소인지 확인
if [ ! -d ".git" ]; then
    error_exit "현재 디렉토리가 git 저장소가 아닙니다."
fi

# 프로젝트명 추출 (현재 디렉토리명)
PROJECT_NAME=$(basename "$(pwd)")

# worktree 경로 설정
WORKTREE_PATH="../${PROJECT_NAME}-${BRANCH_NAME}"

# 이미 존재하는 worktree 확인
if [ -d "$WORKTREE_PATH" ]; then
    error_exit "worktree '$WORKTREE_PATH'가 이미 존재합니다."
fi

# 브랜치가 이미 worktree에서 사용 중인지 확인
if git worktree list | grep -q "$BRANCH_NAME"; then
    error_exit "브랜치 '$BRANCH_NAME'이(가) 이미 worktree에서 사용 중입니다."
fi

# 1단계: 새 worktree 생성
progress_message "새 worktree 생성 중... ($WORKTREE_PATH)"
if git worktree add "$WORKTREE_PATH" -b "$BRANCH_NAME" 2>/dev/null; then
    success_message "worktree 생성 완료"
else
    # 기존 브랜치가 있는 경우
    if git branch | grep -q "^  $BRANCH_NAME$\|^* $BRANCH_NAME$"; then
        progress_message "기존 브랜치 '$BRANCH_NAME'로 worktree 생성 중..."
        git worktree add "$WORKTREE_PATH" "$BRANCH_NAME" || error_exit "worktree 생성 실패"
        success_message "worktree 생성 완료 (기존 브랜치)"
    else
        error_exit "worktree 생성 실패"
    fi
fi

# 2단계: 설정 파일 복사 (.env, pyproject.toml)
if [ -f ".env" ]; then
    progress_message ".env 파일 복사 중..."
    cp .env "$WORKTREE_PATH/.env"
    success_message ".env 파일 복사 완료"
else
    info_message ".env 파일이 없습니다."
fi

if [ -f "pyproject.toml" ]; then
    progress_message "pyproject.toml 파일 복사 중..."
    cp pyproject.toml "$WORKTREE_PATH/pyproject.toml"
    success_message "pyproject.toml 파일 복사 완료"
else
    info_message "pyproject.toml 파일이 없습니다."
fi

# 3단계: 패키지 자동 설치
progress_message "패키지 설치 중... (uv를 사용 중)"
cd "$WORKTREE_PATH" || error_exit "worktree 디렉토리로 이동 실패"

if command -v uv &> /dev/null; then
    if uv sync; then
        success_message "패키지 설치 완료"
    else
        error_exit "패키지 설치 실패"
    fi
else
    error_exit "uv가 설치되어 있지 않습니다. 'uv'를 설치해주세요."
fi

# 완료 메시지
echo ""
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
success_message "워크트리 자동화 완료!"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "worktree 위치: ${BLUE}$WORKTREE_PATH${NC}"
echo -e "브랜치명: ${BLUE}$BRANCH_NAME${NC}"
echo ""
echo "다음 명령어로 worktree로 이동할 수 있습니다:"
echo -e "${BLUE}cd $WORKTREE_PATH${NC}"
echo ""
echo "worktree 목록 확인:"
echo -e "${BLUE}git worktree list${NC}"
echo ""
echo "worktree 삭제:"
echo -e "${BLUE}git worktree remove $WORKTREE_PATH${NC}"
echo ""
